using UnityEngine;
using System.Collections;
using System.Collections.Generic;


[RequireComponent(typeof(Steer))]
[RequireComponent(typeof(CharacterController))]


public class PathSteering : MonoBehaviour {

//movement variables - exposed in inspector panel
	private GameObject target  = null;
	
	//reference to an array of obstacles
	private  GameObject[] obstacles; 
	
	public GameObject main;
	//script object for GameManger
	private GameManager gm;

	
	public float gravity = 100.0f; // keep us grounded
	
	public float maxSpeed;
	public float maxForce;
	
	// Each vehicle contains a CharacterController which helps to deal with
	// the relationship between movement initiated by the character and the forces
	// generated by contact with the terrain & other game objects.
	private CharacterController characterController;
	
	// the SteeringAttributes holds several variables needed for steering
	private SteeringAttributes attr;
	private PathAttributes path;

	// the Steer component implements the basic steering functions
	private Steer steer;

	private Vector3 acceleration;	//change in velocity per second
	private Vector3 velocity;		//change in position per second
	public Vector3 Velocity {
		get { return velocity; }
		set { velocity = value;}
	}

	public GameObject Target {
		get { return target; }
		set { target = value;}
	}
	
	void Start ()
	{
		acceleration = Vector3.zero;
		velocity = transform.forward;
		obstacles = GameObject.FindGameObjectsWithTag ("Obstacle");	
		
		//get component references
		characterController = gameObject.GetComponent<CharacterController> ();
		steer = gameObject.GetComponent<Steer> ();
	    main = GameObject.Find ("MainGO");
		attr = main.GetComponent<SteeringAttributes> ();
		gm = main.GetComponent<GameManager> ();
		
		maxForce = Random.Range(50, 50);
		maxSpeed = Random.Range (50,50);
	}
	
	void LateUpdate ()//
	{
		CalcSteeringForce ();
		
		//update velocity
		velocity += acceleration * Time.deltaTime;
		velocity.y = 0;	// we are staying in the x/z plane
		velocity = Vector3.ClampMagnitude (velocity, maxSpeed);
		
		//orient the transform to face where we going
		if (velocity != Vector3.zero)
			transform.forward = velocity.normalized;

		// keep us grounded
		velocity.y -= gravity * Time.deltaTime;

		// the CharacterController moves us subject to physical constraints
		characterController.Move (velocity * Time.deltaTime);

		//reset acceleration for next cycle
		acceleration = Vector3.zero;
		Debug.DrawRay( gameObject.transform.position, gameObject.transform.forward * 4, Color.green);
	}
	
	
	//calculate and apply steering forces
	private void CalcSteeringForce ()
	{ 
		Vector3 force = Vector3.zero;
		
		
		//obstacles
		for (int i=0; i<obstacles.Length; i++) {	
			force += attr.avoidWt * steer.AvoidObstacle (obstacles [i], attr.avoidDist);
		}
		//Debug.DrawRay (transform.position, force / 100.0f, Color.red);
	 
		//in bounds
		force += attr.inBoundsWt * steer.StayInBounds (150, Vector3.zero);
		
		//seek target
		//force += attr.seekWt * steer.Seek (target.transform.position);
		
			///////////////////////////////////////////////////////MY CODE //////////////////////////////////////////////////////////
		
		//apply seperation force from GameManger's Flockers ArrayList
		//force += attr.seperationWt * steer.SeperationVer2(gm.GetFlockers()); //option #1
		force += attr.seperationWt * steer.Seperation(gm.GetPrey()); //harder option #2

		List<GameObject> flockers = gm.GetFlockers();
		for( int i = 0; i < gm.GetFlockers().Count; i++)
		{
			force += attr.fleeWt * steer.Flee(flockers[i].transform.position);
		}
		
		//apply cohesion force from GameManger's Centroid 
		//force += attr.cohesionWt * steer.Cohesion(gm.GetCentroid());
		
		//apply Alignment force from GameManger's Direction
		//force += attr.allignWt * steer.Alignment(gm.GetDirection());
		
		force += attr.followWt * steer.Follow(steer.path);
			
		///////////////////////////////////////////////////////MY CODE //////////////////////////////////////////////////////////

		
		force = Vector3.ClampMagnitude (force, maxForce);
		ApplyForce (force);
	}

	
	private void ApplyForce (Vector3 steeringForce)
	{
		acceleration += steeringForce/attr.mass;
	}
}
